#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Core
** Lexical binding
By default all variables are dynamically looked up in one global table. This creates a new environment of variables for each scope (function, let expression, etc) like more modern languages
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
#+end_src

** Startup performance
Measure and tweak startup performance.
#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 100 1000 1000))

  (defun jdr/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'jdr/display-startup-time)
#+end_src

** Basic UI setup
#+begin_src emacs-lisp
  ;; visual stuff
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (set-default 'truncate-lines t)

  ;; base font setup
  (setq font-use-system-font t)
  (let ((default-font-height (if (eq system-type 'darwin) 150 110)))
    (set-face-attribute 'default nil :height default-font-height))

  ;; Enable line numbering in `prog-mode'
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src

** Package setup
Don't let emacs manage it's own plugins, from the [[https://nixos.org/manual/nixos/stable/index.html#module-services-emacs-configuring][emacs section of the nix manual]].
#+begin_src emacs-lisp
  (require 'package)
  ;; makes unpure packages archives unavailable
  (setq package-archives nil)
  (setq package-enable-at-startup nil)
  (package-initialize)
#+end_src

** Auto-tangle Configuration Files
Auto tangle any org files located in my =.emacs.d= directory, not a perfect hook, but close enough. A modified version of [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org#auto-tangle-configuration-files][this config in emacs from scratch]].
#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  ;; FIXME don't hardcode nixfiles directory
  (defun jdr/org-babel-tangle ()
    (when (string-equal (file-name-directory buffer-file-name)
                        (expand-file-name "~/nixfiles/users/jack/emacs/"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'jdr/org-babel-tangle)))
#+end_src

** Theme
#+begin_src emacs-lisp
  (setq modus-themes-bold-constructs t
        modus-themes-italic-constructs t
        modus-themes-fringes 'subtle
        modus-themes-paren-match '(intense)
        modus-themes-prompts '(bold intense)
        modus-themes-completions 'opinionated
        modus-themes-org-blocks 'tinted-background
        modus-themes-scale-headings t
        modus-themes-region '(bg-only)
        modus-themes-syntax '(yellow-comments)
        modus-themes-headings
        '((1 . (overline background 1.4))
          (2 . (background 1.3))
          (3 . (bold 1.2))
          (t . (semilight 1.1))))
  ;; Load the light theme by default
  (load-theme 'modus-operandi t)
#+end_src

** Keeping =.emacs.d= clean
Use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep the Emacs configuration folder clean! It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables manually.
#+begin_src emacs-lisp
  (use-package no-littering)
  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

** Misc other setup stuff
#+begin_src emacs-lisp
  ;; NOTE: The first time you load your configuration on a new machine, you'll
  ;; need to run the following command interactively so that mode line icons
  ;; display correctly:

  ;; M-x all-the-icons-install-fonts
  (use-package all-the-icons)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))

  (recentf-mode t)
  (setq recentf-max-saved-items 50)
#+end_src

** Autopair brackets
Built-in and relatively smart auto pairing of brackets and quotes.
Disable auto-pairing of =<= in org mode because it messes with [[*Org structured templates][structured templates]]. See [[https://emacs.stackexchange.com/questions/26225/dont-pair-quotes-in-electric-pair-mode][this stack overflow question]] for how it works.
#+begin_src emacs-lisp
  (electric-pair-mode 1)

  (add-hook
   'org-mode-hook
   (lambda ()
     (setq-local electric-pair-inhibit-predicate
                 `(lambda (c)
                    (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
  #+end_src

** Help
#+begin_src emacs-lisp
  (use-package helpful
    :bind
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key)
    :config
    (global-set-key (kbd "C-c C-d") #'helpful-at-point))

  ;; modes with variable width font (docs + help)
  (dolist (mode '(help-mode-hook
                  helpful-mode-hook))
    (add-hook mode (lambda () (variable-pitch-mode))))
#+end_src

** Pulse on actions
This pulses on most text changes, at first glance I thought it would be too much but so far I'm really liking it. Even if I end up turning it down or off, it would be awesome to have on while pairing.
#+begin_src emacs-lisp
  (use-package evil-goggles
    :ensure t
    :after evil
    :config
    (evil-goggles-mode)
    (evil-goggles-use-diff-faces))
#+end_src

** Undo system
Use the built in undo-redo system, and the basic =vundo= package to visualise the undo tree.
#+begin_src emacs-lisp
  (use-package vundo
    :config
    (setq vundo-glyph-alist vundo-unicode-symbols))
#+end_src

* Project management stuff
** Project.el
=C-x p p= to open project switcher
#+begin_src emacs-lisp
  (defun project-vterm ()
    "Start a new vterm in project root (based on `project-shell`)"
    (interactive)
    (let* ((default-directory (project-root (project-current t)))
	   (default-project-vterm-name (project-prefixed-buffer-name "vterm"))
	   (vterm-buffer (get-buffer default-project-vterm-name)))
      (if (and vterm-buffer (not current-prefix-arg))
	  (pop-to-buffer-same-window vterm-buffer)
	(vterm (generate-new-buffer-name default-project-vterm-name)))))

  (use-package project
    :config
    (add-to-list 'project-switch-commands '(project-vterm "VTerm"))
    (add-to-list 'project-switch-commands '(magit-project-status "Magit"))
    :bind (("C-x p t" . project-vterm)
	   ("C-x p m" . magit-project-status)))
#+end_src

* Minibuffer completions
Covers minibuffer completions, for completion at point look under the [[*Lsp][lsp section]]
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)
    (setq vertico-cycle t))

  (use-package marginalia
    :config
    (marginalia-mode 1))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; Alternatively try `consult-completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

#+end_src

* Keymaps
** Evil core
This section sets up evil behaving enough like vanilla vim for me
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :custom
    (evil-want-keybinding nil)
    (evil-want-C-u-scroll t)
    (evil-undo-system 'undo-redo)
    (evil-want-Y-yank-to-eol t)
    (evil-split-window-below t)
    (evil-vsplit-window-right t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal))

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  ;; Since I let evil-mode take over C-u for buffer scrolling, I need to re-bind
  ;; the universal-argument command to another key sequence
  (global-set-key (kbd "C-M-u") 'universal-argument)
#+end_src

** Evil extras
All the additional evil packages that are basically required
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :custom
    (evil-collection-calendar-want-org-bindings t)
    (evil-collection-setup-minibuffer t)
    :config
    (evil-collection-init))

  (use-package evil-numbers
    :after evil
    :ensure t
    :config
    (define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt))

  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  (use-package evil-surround
    :ensure t
    :after evil
    :config
    (global-evil-surround-mode 1))

  (use-package evil-commentary
    :ensure t
    :after evil
    :config (evil-commentary-mode))
#+end_src

** Evil window movements
Make evil window movements less strict, by default they're only =C-w {h,j,k,l}=, so if you don't let go of =ctrl= fast enough it doesn't work. This also aligns with vim's default behaviour.
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global (kbd "C-w C-h") 'evil-window-left)
  (evil-define-key 'normal 'global (kbd "C-w C-j") 'evil-window-down)
  (evil-define-key 'normal 'global (kbd "C-w C-k") 'evil-window-up)
  (evil-define-key 'normal 'global (kbd "C-w C-l") 'evil-window-right)
#+end_src

** Keymaps
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

  (use-package general
    :init
    (setq general-override-states
          '(insert emacs hybrid normal visual motion operator replace))
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (general-create-definer rune/quick-keys
      :keymaps '(normal)
      :prefix ","))

  (rune/leader-keys
    "p" project-prefix-map
    "gs" 'magit-status
    "hf" 'helpful-function
    "hv" 'helpful-variable
    "hk" 'helpful-key)

  ;; setup avy like my hop.nvim setup
  (use-package avy
    :after evil
    :config
    (evil-define-key 'normal 'global "s" 'evil-avy-goto-char))

  ;; quick keymaps like my vim setup
  (rune/quick-keys
    "b" 'consult-buffer
    "B" 'consult-project-buffer
    "f" 'find-file
    "l" 'consult-line
    "o" 'consult-recent-file
    "a" 'deadgrep
    "x" 'execute-extended-command)

  (use-package deadgrep)
  (use-package consult)
  ;; (use-package embark) ;; yeah?
  
#+end_src

* Org
** Core
#+begin_src emacs-lisp
  (defun jdr/org-mode-setup ()
    (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
    (org-indent-mode 1)
    (visual-line-mode 1)

    (setq
     ;; Agenda styling
     ;; org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "⭠ now ─────────────────────────────────────────────────")

    ;; override variable pitch fonts selectively
    (variable-pitch-mode 1)
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    )

  (use-package org
    :hook (org-mode . jdr/org-mode-setup)
    :bind (("C-c l" . org-store-link))
    :custom
    (org-startup-with-inline-images t)
    (org-confirm-babel-evaluate nil)
    (org-auto-align-tags nil)
    (org-tags-column 0)
    (org-catch-invisible-edits 'show-and-error)
    (org-special-ctrl-a/e t)
    (org-insert-heading-respect-content t)
    (org-pretty-entities t)
    (org-ellipsis "…")
    (org-agenda-start-with-log-mode t)
    (org-log-into-drawer t)
    (org-directory "~/org/")
    (org-agenda-files '("~/org/" "~/org/logbook"))
    (org-archive-location "~/org/archive")
    (org-todo-keywords
     '((sequence "TODO(t)" "IN-PROGRESS(p!)" "WAITING(w@/!)"
                 "|" "DONE(d!)" "CANCELLED(c!)")))
    :config
    ;; load org stuff up front rather than on the first time an org file is opened
    (org-load-modules-maybe t))
    #+end_src

** Org journal
=C-c C-j= is the default binding for ~org-journal-new-entry~, but we need to bind it in org-mode as this is ~org-goto~ by default.
#+begin_src emacs-lisp
  (use-package org-journal
    :ensure t
    :config
    (define-key org-mode-map (kbd "C-c C-j") 'org-journal-new-entry)
    (global-set-key (kbd "C-c C-S-j") 'org-journal-open-current-journal-file)
    (setq org-journal-dir "~/Documents/org/logbook/"
          org-journal-file-type 'weekly
          org-journal-file-format "week-%W.journal.org"
          org-journal-enable-agenda-integration t))
#+end_src

** Org babel
#+begin_src emacs-lisp
  (use-package mermaid-mode)
  (use-package ob-mermaid)

  (with-eval-after-load 'org
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    (add-to-list 'org-src-lang-modes '("javascript" . js))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (js . t)
       (shell . t)
       (python . t)
       (mermaid . t)
       (latex . t)
       (plantuml . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src

** Org structured templates
Org Mode’s structure templates feature enables you to quickly insert code blocks into your Org files in combination with org-tempo by typing =<= followed by the template name like =el= or py and then press =TAB=. For example, to insert an empty emacs-lisp block below, you can type =<el= and press =TAB= to expand into such a block.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("js" . "src js")))
#+end_src

** Max width and center org files
#+begin_src emacs-lisp
  (defun jdr/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . jdr/org-mode-visual-fill))
#+end_src

* Completion at point
#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-auto t)
    (corfu-auto-delay 0)
    (corfu-echo-documentation nil)
    (corfu-cycle t)
    :init
    (global-corfu-mode))

  ;; TODO render markdown from lsp? or is that an eglot thing?
  (use-package corfu-doc
    :config
    (add-hook 'corfu-mode-hook #'corfu-doc-mode))
#+end_src

* Languages
** Lsp
#+begin_src emacs-lisp
  (use-package eglot
    :custom
    (eldoc-echo-area-use-multiline-p nil))

  (use-package flymake
    :bind (("M-n" . flymake-goto-next-error)
           ("M-p" . flymake-goto-prev-error)))
#+end_src

** Tree sitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :ensure t
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

  (use-package tree-sitter-langs
    :ensure t
    :after tree-sitter)

  (use-package evil-textobj-tree-sitter
    :after evil
    :config
    (define-key evil-outer-text-objects-map "c"
      (evil-textobj-tree-sitter-get-textobj "class.outer"))
    (define-key evil-inner-text-objects-map "c"
      (evil-textobj-tree-sitter-get-textobj "class.inner"))
    (define-key evil-outer-text-objects-map "f"
      (evil-textobj-tree-sitter-get-textobj "function.outer"))
    (define-key evil-inner-text-objects-map "f"
      (evil-textobj-tree-sitter-get-textobj "function.inner")))
#+end_src

** Formatting
#+begin_src emacs-lisp
  (use-package apheleia
    :config
    (add-to-list 'apheleia-formatters '(nixfmt . ("nixfmt")))
    (add-to-list 'apheleia-mode-alist '(nix-mode . nixfmt))
    (apheleia-global-mode +1))
#+end_src

** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'\\|\\.tsx\\'"
    :hook (typescript-mode . eglot-ensure)
    :config
    (setq typescript-indent-level 2))
#+end_src

** Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :hook (nix-mode . eglot-ensure)
    :mode "\\.nix\\'")
#+end_src

** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :hook (rust-mode . eglot-ensure)
    :custom
    ;; apheleia 1.2 doesn't work with rustfmt, so use rust-mode's formatting
    (rust-format-on-save t))
#+end_src

** Go
#+begin_src emacs-lisp
  (use-package go-mode
    :hook (go-mode . eglot-ensure))
#+end_src

** Shell
#+begin_src emacs-lisp
  (use-package flymake-shellcheck
    :init
    (add-hook 'sh-mode-hook 'flymake-shellcheck-load))
#+end_src

** PlantUML
Currently only using this in org source blocks, and it's not working yet. But will be nice to have around once it is.
#+begin_src emacs-lisp
  (use-package plantuml-mode)
  (setq plantuml-executable-path "/usr/bin/plantuml")
  (setq org-plantuml-executable-path "/usr/bin/plantuml")
  (setq plantuml-default-exec-mode 'executable)
  (setq org-plantuml-exec-mode 'executable)
#+end_src

* VCS and Magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

* Terminals
** TODO setup eshell
** Vterm
Setup fish colors so they match my current theme (modus-operandi), this is quite brittle because it depends on me using fish and my current emacs theme, but it works okay for now. Colors were calculated using functions from [[https://github.com/snyball/emacs-fish-colors][synball/emacs-fish-colors.]]
#+begin_src emacs-lisp
  (use-package vterm
    :custom
    (vterm-environment
     '("fish_term24bit=1"
       "fish_color_autosuggestion=#505050"
       "fish_color_cancel=#a60000"
       "fish_color_command=#5317ac"
       "fish_color_comment=#505050"
       "fish_color_cwd=#000000"
       "fish_color_cwd_root=#000000"
       "fish_color_end=#000000"
       "fish_color_error=#a60000"
       "fish_color_escape=#000000"
       "fish_color_history_current=#000000"
       "fish_color_host=#000000"
       "fish_color_host_remote=#000000"
       "fish_color_match=#000000"
       "fish_color_normal=#000000"
       "fish_color_operator=#721045"
       "fish_color_param=#000000"
       "fish_color_quote=#2544bb"
       "fish_color_redirection=#721045"
       "fish_color_search_match=#000000"
       "fish_color_selection=#000000"
       "fish_color_status=#000000"
       "fish_color_user=#000000")))
#+end_src

* Snippets
** Tempel config
#+begin_src emacs-lisp
  (use-package tempel
    :bind (("C-j" . tempel-expand)
           ("C-l" . tempel-next)
           ("M-+" . tempel-complete)
           ("M-*" . tempel-insert))
    :custom
    (tempel-path "~/.emacs.d/templates.el")
    :init
    (defun tempel-setup-capf ()
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))
    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf))
#+end_src

** Snippet definitions
*** Set filetype
Adds syntax highlighting if file is opened directly.
#+begin_src lisp-data :tangle ./templates.el
  ;;; -*- lisp-data -*-
#+end_src

*** Fundimental and prog modes
#+begin_src lisp-data :tangle ./templates.el
  fundamental-mode ;; Available everywhere

  (today (format-time-string "%Y-%m-%d"))

  prog-mode

  (fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "FIXME ")
  (todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "TODO ")
  (bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "BUG ")
  (hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "HACK ")
#+end_src

*** Org mode
These are still just examples from the tempel repo, can do better than this.
#+begin_src lisp-data :tangle ./templates.el
  org-mode

  (title "#+title: " p n "#+author: Daniel Mendler" n "#+language: en" n n)
  (quote "#+begin_quote" n r n "#+end_quote")
  (example "#+begin_example" n> r> n> "#+end_example")
  (center "#+begin_center" n> r> n> "#+end_center")
  (comment "#+begin_comment" n> r> n> "#+end_comment")
  (verse "#+begin_verse" n> r> n> "#+end_verse")
  (src "#+begin_src " p n> r> n> "#+end_src" :post (org-edit-src-code))
  (elisp "#+begin_src emacs-lisp" n> r> n "#+end_src" :post (org-edit-src-code))
#+end_src
*** Lisp modes
These are still just examples from the tempel repo, probably get rid of most
#+begin_src lisp-data :tangle ./templates.el
  lisp-mode emacs-lisp-mode ;; Specify multiple modes

  (lambda "(lambda (" p ")" n> r> ")")

  emacs-lisp-mode

  (autoload ";;;###autoload")
  (pt "(point)")
  (lambda "(lambda (" p ")" n> r> ")")
  (var "(defvar " p "\n  \"" p "\")")
  (local "(defvar-local " p "\n  \"" p "\")")
  (const "(defconst " p "\n  \"" p "\")")
  (custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
  (face "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
  (group "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
  (macro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
  (alias "(defalias '" p " '" p ")")
  (fun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
  (iflet "(if-let (" p ")" n> r> ")")
  (whenlet "(when-let (" p ")" n> r> ")")
  (iflet* "(if-let* (" p ")" n> r> ")")
  (whenlet* "(when-let* (" p ")" n> r> ")")
  (andlet* "(and-let* (" p ")" n> r> ")")
  (cond "(cond" n "(" q "))" >)
  (pcase "(pcase " (p "scrutinee") n "(" q "))" >)
  (let "(let (" p ")" n> r> ")")
  (let* "(let* (" p ")" n> r> ")")
  (rec "(letrec (" p ")" n> r> ")")
  (dotimes "(dotimes (" p ")" n> r> ")")
  (dolist "(dolist (" p ")" n> r> ")")
  (loop "(cl-loop for " p " in " p " do" n> r> ")")
  (command "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive" p ")" n> r> ")")
  (advice "(defun " (p "adv" name) " (&rest app)" n> p n> "(apply app))" n>
          "(advice-add #'" (p "fun") " " (p ":around") " #'" (s name) ")")
  (provide "(provide '" (file-name-base (or (buffer-file-name) (buffer-name))) ")" n
           ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name))) " ends here" n)
#+end_src
